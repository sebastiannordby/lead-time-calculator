@page "/"
@rendermode RenderMode.InteractiveServer
@using LeadTimeCalculator.Client.Data
@using Radzen
@using Radzen.Blazor

<PageTitle>@PageTitle</PageTitle>
<RadzenDialog />

<div class="p-2 d-flex flex-row gap-3 align-items-center border-1 border">
    <label class="mb-0">Calculate lead time </label>

    <div class="d-flex flex-row gap-2 align-items-center">
        <RadzenLabel
            Text="Starting Date:"
            Component="LeadTimeStartingDate" />
        <RadzenDatePicker
            @bind-Value=@_startingLeadTimeCalc
            Name="LeadTimeStartingDate"
            Disabled="_selectedCalendar is null"
            ShowCalendarWeek
            Placeholder="Select a starting date" />
    </div>

    <div class="d-flex flex-row gap-2 align-items-center">
        <RadzenLabel
            class="mr-2"
            Text="Fractional Workdays:"
            Component="FractionalWorkdays" />
        <RadzenNumeric
            ShowUpDown="false"
            TValue="double"
            @bind-Value=@_leadTimeCalcFractionalWorkdays
            Disabled="_selectedCalendar is null"
            Name="FractionalWorkdays"
            Placeholder="Enter fractional workdays" />
    </div>

    <RadzenButton 
        Disabled="_selectedCalendar is null"
        Click="CalculateLeadTime">Calculate</RadzenButton>
</div>

<RadzenMenu >
    <RadzenMenuItem 
        Text="Add Workday Calendar" 
        Click="AddCalendar"
        Disabled="_selectedCalendar is not null"
        Icon="add"  />
    <RadzenMenuItem 
        Text="Add Holiday" 
        Disabled="_selectedCalendar is null"
        Click="ShowAddHolidayDialogAsync"
        Icon="add"  />
    <RadzenMenuItem 
        Text="Add Exception Day" 
        Disabled="_selectedCalendar is null"
        Click="ShowAddExceptionDayDialogAsync"
        Icon="add"  />
</RadzenMenu>

@if(_selectedCalendar is not null) 
{
    <RadzenScheduler 
        @ref="_scheduler"
        SlotRender=@OnSlotRender 
        style="height: 768px;" 
        TItem="Appointment" 
        Data=@_appointments 
        StartProperty="Start" 
        EndProperty="End"
        TextProperty="Text" 
        SelectedIndex="0"
        LoadData=@OnSchedulerLoadData
        SlotSelect=@OnSlotSelect
        AppointmentSelect=@OnAppointmentSelect 
        AppointmentRender=@OnAppointmentRender
        AppointmentMove=@OnAppointmentMove>
            <RadzenMonthView />
    </RadzenScheduler>
}
else 
{
    <h5 class="p-2 text-center text-body-emphasis">No selected workday calendar, create one to begin calculating lead times.</h5>
    <p class="text-center">Click "Add Workday Calendar" to start</p>
}


@code {
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        if (args.View.Text != "Year")
        {
            // Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
            //     new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            // if (data != null)
            // {
            //     appointments.Add(data);
            //     // Either call the Reload method or reassign the Data property of the Scheduler
            //     await scheduler.Reload();
            // }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        var copy = new Appointment
        {
            Start = args.Data.Start,
            End = args.Data.End,
            Text = args.Data.Text
        };

        // var data = await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", copy } });

        // if (data != null)
        // {
        //     // Update the appointment
        //     args.Data.Start = data.Start;
        //     args.Data.End = data.End;
        //     args.Data.Text = data.Text;
        // }

        // await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        if (args.Data.Text.Contains("Holiday"))
        {
            args.Attributes["style"] = "background: red";
        }
        else if(args.Data.Text.Contains("Exception Day")) 
        {
            args.Attributes["style"] = "background: yellow; color: black;";
        }
    }

    async Task OnAppointmentMove(SchedulerAppointmentMoveEventArgs args)
    {
        var draggedAppointment = _appointments.FirstOrDefault(x => x == args.Appointment.Data);

        if (draggedAppointment != null)
        {
            draggedAppointment.Start = draggedAppointment.Start + args.TimeSpan;

            draggedAppointment.End = draggedAppointment.End + args.TimeSpan;

            // await scheduler.Reload();
        }
    }
}